/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * $Id$
 */
package org.apache.xalan.templates;

import java.util.List;
import java.util.Vector;

import javax.xml.transform.SourceLocator;
import javax.xml.transform.TransformerException;

import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xalan.xslt.util.XslTransformEvaluationHelper;
import org.apache.xml.serializer.CharacterMapConfig;
import org.apache.xml.serializer.SerializationHandler;
import org.apache.xml.serializer.SerializerBase;
import org.apache.xpath.XPath;
import org.apache.xpath.XPathContext;
import org.apache.xpath.compiler.XPathParser;
import org.apache.xpath.objects.XObject;
import org.xml.sax.SAXException;

/**
 * Implement a text literal.
 * @see <a href="http://www.w3.org/TR/xslt#section-Creating-Text">section-Creating-Text in XSLT Specification</a>
 * @xsl.usage advanced
 */
public class ElemTextLiteral extends ElemTemplateElement
{
  static final long serialVersionUID = -7872620006767660088L;

  /**
   * Tell if space should be preserved.
   */
  private boolean m_preserveSpace;

  /**
   * Set whether or not space should be preserved.
   *
   * @param v Boolean flag indicating whether 
   * or not space should be preserved
   */
  public void setPreserveSpace(boolean v)
  {
    m_preserveSpace = v;
  }

  /**
   * Get whether or not space should be preserved.
   *
   * @return Boolean flag indicating whether 
   * or not space should be preserved 
   */
  public boolean getPreserveSpace()
  {
    return m_preserveSpace;
  }

  /**
   * The character array.
   */
  private char m_ch[];
  
  /**
   * The character array as a string.
   */
  private String m_str;

  /**
   * Set the characters that will be output to the result tree.
   *
   * @param v Array of characters that will be output to the result tree 
   */
  public void setChars(char[] v)
  {
    m_ch = v;
  }

  /**
   * Get the characters that will be output to the result tree..
   *
   * @return Array of characters that will be output to the result tree
   */
  public char[] getChars()
  {
    return m_ch;
  }
  
  /**
   * Get the value of the node as a string.
   *
   * @return null
   */
  public synchronized String getNodeValue()
  {

    if(null == m_str)
    {
      m_str = new String(m_ch);
    }

    return m_str;
  }


  /**
   * Tells if this element should disable escaping.
   */
  private boolean m_disableOutputEscaping = false;

  /**
   * Set the "disable-output-escaping" attribute.
   * Normally, the xml output method escapes & and < (and
   * possibly other characters) when outputting text nodes.
   * This ensures that the output is well-formed XML. However,
   * it is sometimes convenient to be able to produce output
   * that is almost, but not quite well-formed XML; for
   * example, the output may include ill-formed sections
   * which are intended to be transformed into well-formed
   * XML by a subsequent non-XML aware process. For this reason,
   * XSLT provides a mechanism for disabling output escaping.
   * An xsl:value-of or xsl:text element may have a
   * disable-output-escaping attribute; the allowed values
   * are yes or no; the default is no; if the value is yes,
   * then a text node generated by instantiating the xsl:value-of
   * or xsl:text element should be output without any escaping.
   * @see <a href="http://www.w3.org/TR/xslt#disable-output-escaping">disable-output-escaping in XSLT Specification</a>
   *
   * @param v Boolean value for "disable-output-escaping" attribute.
   */
  public void setDisableOutputEscaping(boolean v)
  {
    m_disableOutputEscaping = v;
  }

  /**
   * Get the "disable-output-escaping" attribute.
   * Normally, the xml output method escapes & and < (and
   * possibly other characters) when outputting text nodes.
   * This ensures that the output is well-formed XML. However,
   * it is sometimes convenient to be able to produce output
   * that is almost, but not quite well-formed XML; for
   * example, the output may include ill-formed sections
   * which are intended to be transformed into well-formed
   * XML by a subsequent non-XML aware process. For this reason,
   * XSLT provides a mechanism for disabling output escaping.
   * An xsl:value-of or xsl:text element may have a
   * disable-output-escaping attribute; the allowed values
   * are yes or no; the default is no; if the value is yes,
   * then a text node generated by instantiating the xsl:value-of
   * or xsl:text element should be output without any escaping.
   * @see <a href="http://www.w3.org/TR/xslt#disable-output-escaping">disable-output-escaping in XSLT Specification</a>
   *
   * @return Boolean value of "disable-output-escaping" attribute.
   */
  public boolean getDisableOutputEscaping()
  {
    return m_disableOutputEscaping;
  }
  
  private Vector m_vars;
  
  private int m_globals_size;
  
  public void compose(StylesheetRoot sroot) throws TransformerException
  {
    super.compose(sroot);
    
    Vector vars = sroot.getComposeState().getVariableNames(); 
    m_vars = (Vector)(vars.clone());
    m_globals_size = sroot.getComposeState().getGlobalsSize();
  }

  /**
   * Get an integer representation of the element type.
   *
   * @return An integer representation of the element, defined in the
   *     Constants class.
   * @see org.apache.xalan.templates.Constants
   */
  public int getXSLToken()
  {
    return Constants.ELEMNAME_TEXTLITERALRESULT;
  }

  /**
   * Return the node name.
   *
   * @return The element's name
   */
  public String getNodeName()
  {
    return "#Text";
  }

  /**
   * Copy the text literal to the result tree.
   *
   * @param transformer non-null reference to the the current transform-time state.
   *
   * @throws TransformerException
   */
  public void execute(
          TransformerImpl transformer)
            throws TransformerException
  {
    try
    {
      SerializationHandler rth = transformer.getResultTreeHandler();
      
      String strValue = new String(m_ch);
      
      ElemTemplateElement elemTemplateElem = getParentElem();      
      boolean isExpandText = getExpandTextValue(elemTemplateElem);
      if (isExpandText) {
         strValue = getStrValueAfterExpandTextProcessing(strValue, transformer);
      }
      
      if (rth instanceof SerializerBase) {    	  
    	  SerializerBase serializerBase = (SerializerBase)rth;
    	  CharacterMapConfig charMapConfig = serializerBase.getCharMapConfig();
    	  if (charMapConfig != null) {
    		 // xsl:character-map transformation
    	     strValue = XslTransformEvaluationHelper.characterMapTransformation(strValue, charMapConfig);    	  
    	     m_ch = strValue.toCharArray();
    	  }
      }
      
      if (transformer.getDebug()) {
        // flush any pending cached processing before the trace event.
        rth.flushPending();
        transformer.getTraceManager().emitTraceEvent(this);
      }

      if (m_disableOutputEscaping)
      {
        rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING, "");
      }

      rth.characters(m_ch, 0, m_ch.length);

      if (m_disableOutputEscaping)
      {
        rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING, "");
      }
    }
    catch(SAXException se)
    {
      throw new TransformerException(se);
    }
    finally
    {
      if (transformer.getDebug()) {
        try
        {
            // flush any pending cached processing before sending the trace event
            transformer.getResultTreeHandler().flushPending();
            transformer.getTraceManager().emitTraceEndEvent(this);
        }
        catch (SAXException se)
        {
            throw new TransformerException(se);
        } 
      }
    }
  }
  
  public void endCompose(StylesheetRoot sroot) throws TransformerException
  {    
    super.endCompose(sroot);
  }
  
  /**
   * Method definition, to transform the supplied string value for 
   * expand-text processing.
   * 
   * @param strValue						 The supplied string value
   * @param transformer					     An TransformerImpl object instance	
   * @return								 The string value after applying 
   *                                         an XSL expand-text transformation. 
   * @throws TransformerException
   */
  public String getStrValueAfterExpandTextProcessing(String strValue, TransformerImpl transformer) 
		                                                                                       throws TransformerException {
	 
	  String result = strValue;	 	 

	  XPathContext xctxt = transformer.getXPathContext();
	  int contextNode = xctxt.getCurrentNode();

	  SourceLocator srcLocator = xctxt.getSAXLocator();

	  int i = strValue.indexOf('{');
	  int j = strValue.indexOf('}');
	  StringBuffer strBuff = new StringBuffer();
	  if (i < j) {
		  List<XMLNSDecl> prefixTable = null;
		  ElemTemplateElement elemTemplateElement = (ElemTemplateElement)xctxt.getNamespaceContext();            
		  if (elemTemplateElement != null) {
			  prefixTable = (List<XMLNSDecl>)elemTemplateElement.getPrefixTable();
		  }

		  String str1 = null;
		  String xpathExprStr = null;
		  String remainingStr = null;
		  if (i > -1) {
			  str1 = strValue.substring(0, i);    		       		   
			  xpathExprStr = strValue.substring(i + 1, j);
			  strBuff.append(str1);
			  remainingStr = strValue.substring(j + 1); 
		  }
		  
		  ElemTemplateElement elemTemplateElem = getParentElem();
		  
		  String xpathDefaultNamespace = XPathParser.getXPathDefaultNamespace(elemTemplateElem);

		  // Traverse the string value from left to right, and apply expand-text 
		  // processing to each substring {...} that is found.
		  while (i > -1) {
			  if (prefixTable != null) {
				  xpathExprStr = XslTransformEvaluationHelper.replaceNsUrisWithPrefixesOnXPathStr(xpathExprStr, prefixTable);
			  }
			  XPath xpathObj = new XPath(xpathExprStr, srcLocator, xctxt.getNamespaceContext(), XPath.SELECT, null, xpathDefaultNamespace);
			  if (m_vars != null) {
				  xpathObj.fixupVariables(m_vars, m_globals_size);
			  }				 

			  XObject xObj = xpathObj.execute(xctxt, contextNode, xctxt.getNamespaceContext());
			  String str2 = XslTransformEvaluationHelper.getStrVal(xObj);

			  strBuff.append(str2);

			  i = remainingStr.indexOf('{');
			  j = remainingStr.indexOf('}');
			  
			  if ((i < j) && (i > -1)) {
				  str1 = remainingStr.substring(0, i);    		       		   
				  xpathExprStr = remainingStr.substring(i + 1, j);
				  strBuff.append(str1);
				  remainingStr = remainingStr.substring(j + 1); 
			  }
			  else {
				  strBuff.append(remainingStr);
			  }
		  }
	  }

	  if (strBuff.length() > 0) {
		  result = strBuff.toString();
	  }

	  return result;
  }
  
  /**
   * Method definition, to get an effective value of XSL 'expand-text', 
   * that needs to be applied.
   * 
   * @param elemTemplateElem				The context XSL stylesheet element 
   * @return								An effective value of XSL 'expand-text' 
   */
  public boolean getExpandTextValue(ElemTemplateElement elemTemplateElem) {

  	boolean result = false;

  	if (elemTemplateElem instanceof StylesheetRoot) {
  		result = ((StylesheetRoot)elemTemplateElem).getExpandText(); 
  	}
  	else if (elemTemplateElem instanceof ElemVariable) {
  		result = ((ElemVariable)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemFunction) {
  		result = ((ElemFunction)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemTemplate) {
  		result = ((ElemTemplate)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemApplyTemplates) {
  		result = ((ElemApplyTemplates)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemForEach) {
  		result = ((ElemForEach)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemForEachGroup) {
  		result = ((ElemForEachGroup)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemIterate) {
  		result = ((ElemIterate)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemValueOf) {
  		result = ((ElemValueOf)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemCopyOf) {
  		result = ((ElemCopyOf)elemTemplateElem).getExpandText();  		
  	}		
  	else if (elemTemplateElem instanceof ElemLiteralResult) {
  		result = ((ElemLiteralResult)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemChoose) {
  		result = ((ElemChoose)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemWhen) {
  		result = ((ElemWhen)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemOtherwise) {
  		result = ((ElemOtherwise)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemIf) {
  		result = ((ElemIf)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemSequence) {
  		result = ((ElemSequence)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemNumber) {
  		result = ((ElemNumber)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemText) {
  		result = ((ElemText)elemTemplateElem).getExpandText();  		
  	} 
  	else if (elemTemplateElem instanceof ElemAttribute) {
  		result = ((ElemAttribute)elemTemplateElem).getExpandText();  		
  	}
  	else if (elemTemplateElem instanceof ElemElement) {
  		result = ((ElemElement)elemTemplateElem).getExpandText();  		
  	} 

  	return result;
  }
  
}
