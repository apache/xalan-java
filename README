<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

Copyright 1999-2025 The Apache Software Foundation

Document last modified : 2025-07-27

Authors:
   Gary Gregory <ggregory@apache.org>
   Joseph Kesselman <keshlam@alum.mit.edu>
   Mukul Gandhi <mukulg@apache.org>

This GitHub repos branch has src code configured as Maven (https://maven.apache.org/) build, for 
Xalan-J's implementation of XSLT 3.0 and XPath 3.1 specifications. XSLT, XPath and XQuery languages
are collectively named as XSL (Extensible Stylesheet Language). There are various places within Xalan-J's
source code and documents, where we use the name XSL to refer to XSLT 3.0 and XPath 3.1.

Following are the steps, to run Xalan-J's XSLT 3.0 and XPath 3.1 conformance tests and produce 
XSLT 3.0 build jar file (containing Xalan-J's XSLT 3.0 and XPath 3.1 run-time processors):  

1) Set JAVA_HOME environment variable referring to JDK's local installation folder. JDK version 1.8/8 has been used
to develop and test Xalan-J's src code available within this code base repos branch. JDK versions greater than 1.8 
shall also work fine to compile and run Xalan-J's XSLT 3.0 processor built from this code base repos branch.

2) Java Maven build tool needs to be installed on local workstation, using JDK installation referred by JAVA_HOME 
environment variable.

3) Run the following Maven build command:

mvn clean install test -Dtest=AllXalanXSLT3Tests

The Maven build results like following shall be produced: 

[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.xalan.tests.main.AllXalanXSLT3Tests
[INFO] Tests run: 1183, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 31.474 s - in org.apache.xalan.tests.main.AllXalanXSLT3Tests
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1183, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO]
[INFO] --- jar:3.3.0:jar (default-jar) @ xalan-java ---
[INFO] Building jar: {folder prefix}\xalan-j_xslt3.0_mvn\target\xalan-java-3.0.1.jar

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:14 min


If the user needs to run Xalan-J's XSLT 3.0 implementation via Java application code, the value of JVM's system property 
javax.xml.transform.TransformerFactory needs to be set to org.apache.xalan.processor.XSL3TransformerFactoryImpl.

4) This code base repos branch also has Xalan-J's XSLT 3.0 test drivers for W3C XSLT 3.0 test suite (located at, 
https://github.com/w3c/xslt30-test).

The code repos folder src/test/java/org/apache/xalan/tests/w3c/xslt3 has following Java classes for this purpose:

W3CXSLT3Tests : To run various W3C XSLT 3.0 test sets, to test Xalan-J's XSLT 3.0 implementation.

W3CXSLT3TestSuiteXalanResultSummarize : To produce an aggregated W3C XSLT 3.0 test suite results, for Xalan-J's 
XSLT 3.0 implementation.

Xalan-J's XSLT 3.0 implementation's conformance results with W3C XSLT 3.0 test suite are available at following location : 
https://github.com/apache/xalan-java/blob/xalan-j_xslt3.0_mvn/src/test/java/org/apache/xalan/tests/w3c/xslt3/result/w3c_xslt3_testsuite_xalan-j_result.xml

5) Generating Xalan-J code base documentation for this dev repos branch, using JDK's javadoc command 

Following are the steps to do this, for Windows environment.

Produce list of Java files within folder xalan-j_xslt3.0_mvn : dir /s /b *.java > file.lst

Filter specific files : java org.apache.xalan.xslt.Process -in file_filter.xsl -xsl file_filter.xsl -out filtered_file_list.txt

Produce Xalan-J code documentation for this dev repos branch : javadoc -d javadoc @filtered_file_list.txt

Javadocs for Xalan-J code documentation for this dev repos branch are located here : https://xalan.apache.org/xalan-j/xsl3/javadoc/   

6) The PDF document https://xalan.apache.org/xalan-j/xsl3/xalanj_xslt3.0_implementation_status.pdf, provides various other 
details about Xalan-J's XSLT 3.0 and XPath 3.1 implementations.
