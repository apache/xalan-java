<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

Copyright 1999-2024 The Apache Software Foundation

Authors:
   Gary Gregory <ggregory@apache.org>
   Joe Kesselman <jkesselm@apache.org>
   Mukul Gandhi <mukulg@apache.org>

This GitHub repos branch has src code provided as Maven (https://maven.apache.org/) build, for 
Xalan-J's implementation of XSLT 3.0 and XPath 3.1 specifications.

Following are the steps to produce Xalan-J's XSL 3 jar file and run associated XSL tests from this 
codebase repos (successfully verified on Windows environment):

1) Set JAVA_HOME environment variable pointing to a local JDK installation folder. JDK 1.8/8 has been used
to write and test Xalan-J's src code available within this codebase repos. Higher versioned JDK releases would also 
work fine to compile and run Xalan-J XSL processor from this codebase repos.

2) Please ensure that Maven build tool has been installed on local workstation, which is using the JDK specified by 
JAVA_HOME environment variable.

3) Run Maven build command 'mvn clean package', or 'mvn clean install' on the local workstation folder 
where pom.xml file for Xalan-J's maven project is located. This shall produce the Java jar file xalan-3.0.1-SNAPSHOT.jar 
within local folder /target.

The 'libs' file-system folder available within this GitHub repos branch contains various jar file dependencies as convenience 
to users, that are needed by the main Xalan-J jar file xalan-3.0.1-SNAPSHOT.jar.

3.1) By default, the Maven commands 'mvn clean package/mvn clean install' attempt to produce the build jar file and also run 
the unit tests as well, and produces the status of the tests run-time results.

As of this date, the Xalan-J XSL 3 build results like following appear (without producing the Xalan-J jar file 
xalan-3.0.1-SNAPSHOT.jar, which is not the desired result of this build) after running a Maven build as described above:

[ERROR] Tests run: 2587, Failures: 9, Errors: 1, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  34.242 s

This Xalan-J build failure is there because, few tests have failed. The failed tests are due to UTF-8 encoding issues
while running few of the tests from command-line (which is not due to any issues with Xalan-J XSL 3 codebase). User may run 
Xalan-J build with commands 'mvn clean package/mvn clean install' with option -Dmaven.test.failure.ignore=true, that 
would always produce the Xalan-J jar file ignoring the test failures and also having Xalan-J build succeeding overall.

Running the Xalan-J XSL 3 Maven build with command-line option -Dmaven.test.failure.ignore=true shall produce Xalan-J build 
results similar to as shown below:

[INFO]
[ERROR] Tests run: 2587, Failures: 9, Errors: 1, Skipped: 0
[INFO]
[ERROR] There are test failures.

Please refer to ...\xalan-j_xslt3.0_mvn\target\surefire-reports for the individual test results.
Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[INFO]
[INFO] --- jar:3.3.0:jar (default-jar) @ xalan ---
[INFO] Building jar: ...\xalan-j_xslt3.0_mvn\target\xalan-3.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------


User may also skip running the Xalan-J XSL 3 unit tests entirely, by using the Maven build command-line option -DskipTests.

3.2) User may also only run Xalan-J XSL 3 tests without needing to produce the build jar file, from within development IDE.
The Xalan-J team has verified successfully, that all Xalan-J XSL 3 tests pass when running the tests from within 
development IDE. The Java class org.apache.xalan.tests.xslt3.AllXsl3Tests is an entry-point to run Xalan-J XSL 3 tests.
 

To run Xalan-J's XSL 3 processor for invoking an XSL stylesheet transformation, the jar file xalan-3.0.1-SNAPSHOT.jar and other 
jar files available within 'libs' folder need to be made available on Java run-time's classpath.   


The document https://xalan.apache.org/xalan-j/xsl3/xalanj_xslt3.0_implementation_status.pdf, provides
latest details about Xalan-J's XSLT 3.0 and XPath 3.1 implementation status with respect to Xalan-J's 
compliance with these specifications.
