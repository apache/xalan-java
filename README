<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

Copyright 1999-2025 The Apache Software Foundation

Document last modified : 2025-04-01

Authors:
   Gary Gregory <ggregory@apache.org>
   Joseph Kesselman <jkesselm@apache.org>
   Mukul Gandhi <mukulg@apache.org>

This GitHub repos branch has src code provided as Maven (https://maven.apache.org/) build, for 
Xalan-J's implementation of XSLT 3.0 and XPath 3.1 specifications.

Following are the steps to produce Xalan-J's XSL 3 jar file (containing Xalan's XSLT 3.0 and 
XPath 3.1 run-time processors) and running Xalan-J's XSL 3 conformance tests:

1) Set JAVA_HOME environment variable pointing to a local JDK installation folder. JDK 1.8/8 has been used
to write and test Xalan-J's src code available within this codebase repos. Higher JDK version releases shall also 
work fine to compile and run Xalan-J's XSL processor from this codebase repos.

2) Java Maven build tool needs to be installed on local workstation, using JDK specified by 
JAVA_HOME environment variable.

3) For running successfully few Xalan-J tests available within this test suite, within the Java file 
org.apache.xalan.tests.util.XSLConstants available in this github code repos branch please change
the value of Java class field variables LOCAL_BASE_URI_PREFIX_OF_TESTS1 and LOCAL_BASE_URI_PREFIX_OF_TESTS2
as per local workstation where this test suite is running.

4) Run Maven build command 'mvn clean install -DskipTests' on the local workstation folder 
where Maven's pom.xml file is located. This shall produce the Java jar file xalan-java-3.0.1.jar 
within Maven build's local folder /target.

The 'libs' file-system folder available within this GitHub repos branch contains various jar file dependencies 
provided as convenience to users, that're needed by Xalan-J XSL 3 implementation's jar file xalan-java-3.0.1.jar.

Maven build tool may be used to run only Xalan-J XSL 3 tests, using the following command:

mvn clean test -Dtest=AllXsl3Tests

This produces Maven build output with trailing information like following:

[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.xalan.tests.main.AllXsl3Tests
[INFO] Tests run: 967, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.123 s - in org.apache.xalan.tests.main.AllXsl3Tests
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 967, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------

To run Xalan-J's XSL 3 processor for invoking an XSL stylesheet transformation, the jar file xalan-java-3.0.1.jar and other 
jar files available within 'libs' folder need to be made available on Java run-time's classpath.   

Please note that, unlike previous Xalan-J versions this build doesn't produce a separate serializer.jar file. Instead,
the jar file xalan-java-3.0.1.jar produced by this build contains all the run-time classes and resources of Xalan-J's 
XSL 3 transformation serializer.

If you're running Xalan-J's XSL 3 processor programmatically from this dev repos branch via JAXP's TRaX TransformerFactory interface, 
you need to set value of JVM's system property javax.xml.transform.TransformerFactory to org.apache.xalan.processor.XSL3TransformerFactoryImpl.   

The document https://xalan.apache.org/xalan-j/xsl3/xalanj_xslt3.0_implementation_status.pdf, provides
latest details about Xalan-J's XSLT 3.0 and XPath 3.1 implementation status with respect to Xalan-J's 
compliance with these specifications.
