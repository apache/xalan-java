<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

Copyright 1999-2024 The Apache Software Foundation

Authors:
   Gary Gregory <ggregory@apache.org>
   Joe Kesselman <jkesselm@apache.org>
   Mukul Gandhi <mukulg@apache.org>

This GitHub repos branch has src code provided as Maven (https://maven.apache.org/) build, for 
Xalan-J's implementation of XSLT 3.0 and XPath 3.1 specifications.

Following are the steps to produce Xalan-J's XSL 3 jar file (containing XSLT 3.0 and XPath 3.1 run-time processors),
and running Xalan-J's XSL 3 conformance tests:

1) Set JAVA_HOME environment variable pointing to a local JDK installation folder. JDK 1.8/8 has been used
to write and test Xalan-J's src code available within this codebase repos. Higher versioned JDK releases would also 
work fine to compile and run Xalan-J XSL processor from this codebase repos.

2) Please ensure that Maven build tool has been installed on local workstation, which is using the JDK specified by 
JAVA_HOME environment variable.

3) Run Maven build command 'mvn clean package -DskipTests', or 'mvn clean install -DskipTests' on the local workstation folder 
where pom.xml file for Xalan-J's maven project is located. This shall produce the Java jar file xalanj-3.0.1.jar 
within local folder /target.

The 'libs' file-system folder available within this GitHub repos branch contains various jar file dependencies as convenience 
to users, that are needed by the main Xalan-J jar file xalanj-3.0.1.jar.

Maven build tool may be used to run only Xalan-J XSL 3 tests, using the following command:

mvn clean test -Dtest=org/apache/xalan/tests/xslt3/AllXsl3Tests.java

This produces build output completing like following,

[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.xalan.tests.xslt3.AllXsl3Tests
[INFO] Tests run: 869, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 29.941 s - in org.apache.xalan.tests.xslt3.AllXsl3Tests
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 869, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------

To run Xalan-J's XSL 3 processor for invoking an XSL stylesheet transformation, the jar file xalanj-3.0.1.jar and other 
jar files available within 'libs' folder need to be made available on Java run-time's classpath.   

Please note that, unlike previous Xalan-J builds this build doesn't produce a separate serializer.jar file. Instead,
the jar file xalanj-3.0.1.jar produced by this build contains all the run-time classes and resources of Xalan-J 
XSL 3 transformation serializer.  

The document https://xalan.apache.org/xalan-j/xsl3/xalanj_xslt3.0_implementation_status.pdf, provides
latest details about Xalan-J's XSLT 3.0 and XPath 3.1 implementation status with respect to Xalan-J's 
compliance with these specifications.
